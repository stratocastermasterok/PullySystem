/*Copyright 2018 Tomilola AdewaleLicensed under the Apache License, Version 2.0 (the "License");you may not use this file except in compliance with the License.You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an "AS IS" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.*/ {        function selected_rbutton (rbuttons)    {    for (var i = 0; i < rbuttons.children.length; i++)    if (rbuttons.children[i].value == true)    return i;    }function myScript(thisObj) {          function myScript_buildUI(thisObj) {                    var myPanel = (thisObj instanceof Panel) ? thisObj : new Window("palette", "Pully 2019", [0, 0, 220, 200]);function myFocusFunction(){if (this.text ===this.text) {this.text=""}    }function myBlurFunction(){if (this.text ==="") {this.text=this.text}    }         var pan1_01 = myPanel.add ("panel");        var pan1_02 = myPanel.add ("panel");        var pan1_03 = myPanel.add ("panel");        var pan1_04 = myPanel.add ("panel");        var pan1_05 = myPanel.add ("panel");     myPanel.alignChildren = "fill";     pan1_01.alignChildren = "fill";pan1_02.alignChildren = "fill";pan1_03.alignChildren = "fill";pan1_04.alignChildren = "fill";pan1_05.alignChildren = "fill";var my01group = pan1_01.add ("group"); var bt_import = my01group.add ("button", undefined, "Import");var bt_save = my01group.add ("button", undefined, "Save");var bt_getArray = pan1_02.add ("button", undefined, "Get Array");var bt_makerMarkers = pan1_02.add ("button", undefined, "Make Makers");var st_array = pan1_03.add ("statictext", undefined, "Array");var et_array = pan1_03.add ("edittext", [0,0,200,70], "",{multiline: true});var st_arrayDifference = pan1_03.add ("statictext", undefined, "Array Difference");var et_arrayDifference = pan1_03.add ("edittext", [0,0,200,70], "",{multiline: true, readonly: true});var st_changeAmount = pan1_04.add ("statictext", undefined, "Change Amount");var et_changeAmount = pan1_04.add ("edittext", [0,0,100,30], "-.1");var bt_changeArray = pan1_04.add ("button", undefined, "Change Array");var st_assetFolderName = pan1_05.add ("statictext", undefined, "Type Folder Name");var et_assetFolderName = pan1_05.add ("edittext", [0,0,100,30], "");var st_directions = pan1_05.add ("statictext", undefined, "Type Directions");var et_directions = pan1_05.add ("edittext", [0,0,200,70], "",{multiline: true});var bt_makePully = pan1_05.add ("button", undefined, "Make Pully");var bt_arrangeContent = pan1_05.add ("button", undefined, "Arrange Content");function makePully(){    {                                       app.beginUndoGroup("Undo Pully");                                    function createSlider(myComp){    var nameTest="";        for (t=1; t<=myComp.numLayers;t++)        {             nameTest+=myComp.layer(t).name;            }                        if(nameTest.indexOf("TheEase")==-1)            {                var mySliders= File("/Users/adewale/Downloads/Effects_AutonomyEases2018.ffx");                var myComp = app.project.activeItem;                       var myNull=myComp.layers.addNull();                       myNull.moveToEnd();                       myNull.name="TheEase";                       myNull.applyPreset(mySliders);                              }           }                                    function shuffle(array)                                    {                                            var counter = array.length;                                            var temp = counter;                                            var index = temp; // While there are elements in the array                                            while (counter > 0)                                            { // Pick a random index                                                    index = Math.floor(generateRandomNumber() *                                                            counter); // Decrease counter by 1                                                    counter--; // And swap the last element with it                                                    temp = array[counter];                                                    array[counter] = array[index];                                                    array[index] = temp;                                            }                                            return array;                                    }                             function getPositions(array)                            {                                                                    var w =0;                                var h =0;                                var newPositionArray=[];                                var startPosition=[w,h];                                                                        for (y=0; y<=array.length; y++)                                         {                                            newPositionArray.push(startPosition)                                                                                                                                        if (array[y]==0)                                                {                                                w+= -1920;                                                }                                                if (array[y]==1)                                                {                                                h+=-1080;                                                }                                                                if (array[y]==2)                                                {                                               w+= 1920;                                                }                                                                if (array[y]==3)                                                {                                                h+= 1080;                                                }                                              startPosition=[w,h];                                            }                                                                                return newPositionArray;                            }                                                                   var myItemCollection = app.project.items;                                    var yourFolderName = et_assetFolderName.text.toLowerCase();                                                                        var folderName = yourFolderName; // name of item you're looking for                                            var myFolder = null;   // alert("in cool stufgggf");                                                                                        for (var i = 1; i <= app.project.numItems; i++)                                            {                                                    if ((app.project.item(i).name.toLowerCase() == folderName))                                                    {                                                            myFolder = app.project.item(i);                                                            break;                                                    }                                            } //find the asset folder name you define and make it the variable "myFolder"                                                                                                                             if (myFolder != null)                                            {                                                    var numInFolder = myFolder.numItems;                                                                                               }                                            else                                            {                                                    alert("Can't find comp '" + folderName + "'");                                            } //using the nubmer of rows and columns and other comp secs, we make the griditem comps here                                                                                                                                                                                                       // alert("midway");                                                                                                                    var tally =0; // begin the tally used not to repeat images so much                                                     var myChoice = [];                                                    for (xu = 0; xu < numInFolder; xu++) //for the number of items in the folder....create an array of choices so we eventually don't reuse the same images                                                    {                                                            myChoice[xu] = xu;                                                    }                                                    myChoice = shuffle(myChoice);                              var myMainComp = app.project.activeItem;                           // var mySlider= File("/Users/adewale/Downloads/Effects_AutonomyEases2018.ffx");  createSlider(myMainComp);                            //var physicalOrder=[2,2,2,3,3,2,3,2,3,2,3,2,2,2,3,3,2,3,2,3,2,3];                            //2 is to the right                            //3 is below                            //1 is above                            //4 is to the left                            //THE ARRAY IS ABOUT STUFF THAT WILL BE ADDED TO THE FIRST COMP...                             var physicalOrderr = et_directions.text;                                                                        var physicalOrder=physicalOrderr.split(",");                            var myString='myCoolArray=['+(getPositions(physicalOrder).toString())+'];\n\nmyCoolerArray=[];\nfor(p=0; p<(myCoolArray.length/2); p++)\n{\nmyCoolerArray.push([parseInt(myCoolArray[p*2]),parseInt(myCoolArray[(p*2)+1])]);\n}\n\n\no=thisComp.layer("Guide");\nn = 0;\nextra=0;\nt=time+.5+(1*thisComp.frameDuration)\nif (o.marker.numKeys > 0){\n  	n = o.marker.nearestKey(time).index;\n  		if (o.marker.key(n).time > t){\n    							n--;\n  							}\n					}\nif (n == 0){\nextra=[0,0];\n		}\nelse\n		{\nstart=o.marker.key(n).time;\nend=o.marker.key(n).time+1;\nstartVal= myCoolerArray[(n-1)%myCoolerArray.length];\nendVal= myCoolerArray[n%myCoolerArray.length];\nfunction tomiEase(rate,startTime,endTime, startVal,endVal)\n{\noriginal = linear(t,startTime,endTime,0,2);\nmyScale=rate.valueAtTime(original);\n//return linear(myScale,-2,2.07,startVal-(endVal-startVal),endVal*1.035);\n//return linear(myScale,-2,2.065339,startVal-(endVal-startVal),endVal*(1+(.065339/2)));\nreturn linear(myScale,-2,2,startVal-(endVal-startVal),endVal);\n}\nopts=["normal","normal","normal"];\nseedRandom(n,true);\nchosen=Math.round((Math.ceil(random(0,4))/4));\n\nextra= tomiEase(thisComp.layer("TheEase").effect(opts[chosen])("Slider"),start,end,startVal,endVal);\n}\n-extra';                            // CREATE NEEDED REFERENCES TO DO THEN DO STUFF WITH                                            var compFolder =myItemCollection.addFolder("*ModuleFolder");                             //FOR THE NUMBER OF BOXES TO CREATE...CREATE A COMP...MAKE THE LAYER INSIDE THE COMP YAY BIG AND POSITIONED YAY...PLACE THOSE SIZED COMPS IN FOLDER                                            for (dd = 0; dd <= physicalOrder.length; dd++)                                            {                                            var compW = 1920; // comp width                                            var compH = 1080; // comp height                                            var compL = 60; // comp length (seconds)                                            var compRate = 23.976; // comp frame rate                                            var compBG = [48 / 255, 63 / 255, 84 / 255]; // comp background color                                                                                                                        var myComp = myItemCollection.addComp('1', compW, compH,1, compL, compRate); //creating new comps of varying sizes and stuff                                                    myComp.parentFolder = compFolder;                                                                                                        myComp.bgColor = compBG;                                                    myComp.name = "Comp_" +(dd+1);                                                                                                                 // POSITION AND STUFF OF THE LAYER INSIDE THE COMP                                                                                                                                                                                                                                         var myLayer = myComp.layers.add(myFolder.item(parseInt(parseInt((myChoice[                                                                    tally%                                                            (numInFolder)])  + 1)))); //we're choosing through our choices array...so we don't get a repeat images unless we have too many grid items and thus have to repeat the first couple                            //alert(myChoice[m%numInFolder]  + 1);                                                       myLayer.property("anchorPoint").setValue([0,0]);                                                                            myLayer.property("position").setValue([0,0]);                                                  tally++;                                                                                                    var x = myLayer.width;                                                    var y = myLayer.height; //getting the size of the original image asset                                                    var xx = myComp.width / x                                                    var yy = myComp.height / y //getting the size of the comp                                                    if (xx >= yy)                                                    {                                                            var s = (xx) * 100;                                                            var myVal = [s, s];                                                    }                                                    else                                                    {                                                            s = (yy) * 100;                                                            var myVal = [s, s];                                                    } // proper scaling to fit                                                    myLayer.property("scale").setValue(myVal);                                                                                                   }                                             // GET NUMBER OF COMPS IN NEW FOLDER                                                    var numInFolder = compFolder.numItems;                                              var bugFixItemWorkAround=compFolder.item(1).name;                                                    var myNull=myMainComp.layers.addNull();                                                    myNull.property("anchorPoint").setValue([0, 0]);                                                    myNull.property("position").setValue([0, 0]);                                                    myNull.property("position").expression=myString;                                                                                                     // PUT THOSE NEW COMPS IN A MAIN COMP, WHICH IS ALREADY THE ACTIVE ITEM, AND SET THE RIGH POSITIONS                                                   for (ccg = 0; ccg <= physicalOrder.length; ccg++)                                            {                                               //alert(cc+"_neededPause?_"+compFolder.item((ccg % numInFolder) + 1).name)                                                                                                           var itemVar=parseInt((ccg % numInFolder) + 1);                                                           // var bugFixItemWorkAroundTest2= (compFolder.item(itemVar));                                                            var myLayerinComp = myMainComp.layers.add(compFolder.item(itemVar));                                                                myLayerinComp.moveToEnd();                                                                myLayerinComp.name="Comp_" +(ccg+1);                                                                 myLayerinComp.property("anchorPoint").setValue([0, 0]);                                                                var myPos= getPositions(physicalOrder)[ccg];                                                            myLayerinComp.property("position").setValue(myPos);                                                                                                                        myLayerinComp.setParentWithJump(myNull)                                                              }                                                                                                                                                                             var myBack=myMainComp.layers.addSolid([255 / 255, 255 / 255, 255/ 255], "WhiteSolid", myMainComp.width, myMainComp.height, 1, compL);                                                        myBack.moveToEnd();                                                        myBack.applyPreset(mySlider);                                                        myBack.name="TheEase";                                                                           app.endUndoGroup();                                                                                                                         }                                                                               alert("Pully done!");       //endplyymakecode    }function arrangeContent(){    var myTiming=et_array.text;                             app.beginUndoGroup("Ma Code");                         whichProp="position";                                          var myTimes =myTiming;                                        var count=0;                     var myFigures= myTimes.split(",");                    //alert(myFigures);                    //alert(myFigures.length);                    var count2=0;                     var pastCount=0;                     var myComp = app.project.activeItem;                     var selectedLayers = myComp.selectedLayers;                    for (m = 0; m<selectedLayers.length; m++)                      {                    if(m<myFigures.length-1)                    {                                                    if(m==0){                                                          selectedLayers[m].startTime= parseFloat(myFigures[m]) -1;                                                          selectedLayers[m].outPoint= parseFloat(myFigures[m])+2;                                                                                                                                                            }                                                else{                                                          selectedLayers[m].startTime= parseFloat(myFigures[m-1]) -.9;                                                          selectedLayers[m].outPoint= parseFloat(myFigures[m+1]);                                                        }                                                                                                                                                                }                                                                                                                                                                        selectedLayers[m].moveToBeginning();                    }                      app.endUndoGroup();                                   //end of script        }//scriptsfunction arrayOpt1(){                 app.beginUndoGroup("Ma Array Code - Option 1");                                                         var myComp = app.project.activeItem;                var selectedLayers = myComp.selectedLayers;                                 var mySolidArray=[];                            for (m = 0; m<1; m++)                              {                            var numMarkers = selectedLayers[m].property("Marker").numKeys;                             for (mm = 0; mm<= numMarkers-1; mm++)                                                  {                                                                                                                                                               var diff1 = selectedLayers[m].property("Marker").keyTime(mm+1);                                                                                                mySolidArray.push(diff1);                                                                          }                //myComp.layers.addText(myArray.toString());                          //alert(myArray);                          et_array.text = mySolidArray.toString();                          //alert("donnn");                                }                  app.endUndoGroup();     }function getArrayHere(){     et_array.text ="";     et_arrayDifference.text ="";                    arrayOpt1();    //arrayOpt2();    recalculate();    }function arrayOpt2(){    //~                 app.beginUndoGroup("Ma Array Code - Option 2");//~                      //~                 var myArrayDiff=[];//~                             for (m = 0; m<selectedLayers.length; m++)//~                               {//~                             var numMarkers = selectedLayers[m].property("Marker").numKeys;//~                                                 for (mm = 0; mm<numMarkers-1; mm++)//~                                                   {                                //~                                                 //~                                                 //~                                                 var diff2= selectedLayers[m].property("Marker").keyTime(mm+2)-selectedLayers[m].property("Marker").keyTime(mm+1);//~                                                 //alert(diff);//~                                                 myArrayDiff.push(diff2);//~                                               //~                                                 }//~                                                 myArrayDiff.unshift(selectedLayers[m].property("Marker").keyTime(1));//~                 //myComp.layers.addText(myArray.toString());//~                           //alert(myArray);//~                            et_arrayDifference.text = myArrayDiff;//~                                 }//~                   app.endUndoGroup();    recalculate();        }//scriptsfunction nowMakerMarkers(){try{                                var myCheck=et_array.text.split(",")[0];                if ( myCheck !=null)                                {                                                                        {                                        app.beginUndoGroup("Undo Maker Markers");                                        var myTimeArray =et_array.text;                                        //alert(myTimeArray);                                        myTimeArray=myTimeArray.split(",");                                        var numDots =myTimeArray.length;                                        var myComp = app.project.activeItem;                                        var selectedLayers = myComp.selectedLayers;                                        for (m = 0; m<selectedLayers.length; m++)                                          {                                                    var myMarkerLayer = selectedLayers[m];                                                    var markerStream = myMarkerLayer.property("Marker");                                                                                                        //delete any current markers                                                    for (var i=markerStream.numKeys; i>=1; i--)                                                    {                                                        markerValue = markerStream.keyValue(i);                                                        markerStream.removeKey(i);                                                    }                                                                                                        //add new markers based on the array (Option 1 type)                                                    for (var h=0; h<numDots; h++)                                                    {                                                        var myTimeVal= parseFloat(myTimeArray[h]);                                                                                                                var myMarker = new MarkerValue("");                                                         markerStream.setValueAtTime(myTimeVal, myMarker);                                                    }                                        }                                          app.endUndoGroup();                                          }                                                                                                    }            else            {alert ("Write an array in the Array textbox")}                                                                                                                           }           catch(err)           {alert("You need to define have markers");}                                                }function changeMyarray(){            {                                        app.beginUndoGroup("Undo Change My Array");                                        var myTimeArray =et_array.text;                                        //alert(myTimeArray);                                        myTimeArray=myTimeArray.split(",");                                        var numDots =myTimeArray.length;                                                                                var transformedArray =[];                                        var myComp = app.project.activeItem;                                        var selectedLayers = myComp.selectedLayers;                                        for (m = 0; m<1; m++)                                          {                                                    for (var h=0; h<numDots; h++)                                                    {                                                        var myTimeVal= parseFloat(myTimeArray[h]);                                                        transformedArray.push(myTimeVal+parseFloat(et_changeAmount.text));                                                                                                            }                                                                                                et_array.text= transformedArray;                                        }                                          app.endUndoGroup();                                          }            recalculate();                    }function recalculate(){            //alert("noticed a change");    {                                        app.beginUndoGroup("Undo...");                                        var myTimeArray =et_array.text;                                        //alert(myTimeArray);                                        myTimeArray=myTimeArray.split(",");                                        var numDots =myTimeArray.length;                                                                                var minusArray =[];                                                    for (var hh=0; hh<numDots-1; hh++)                                                    {                                                                                                            var mainDiff= parseFloat(myTimeArray[hh+1])-parseFloat(myTimeArray[hh]);                                                        minusArray.push(mainDiff);                                                                                                                                                               }                                                                                                et_arrayDifference.text= minusArray;                                          app.endUndoGroup();                                          }                        }function myImport(){            var myFile = File.openDialog();//var myFile = File("~/Desktop/test/schedules.json"); myFile.open(); var content = myFile.read(); myFile.close(); et_array.text= content;//~        recalculate();                }function mySave(){try{var dskTop = Folder.desktop;    var dskTop = Folder.desktop;    var dskPth = String(dskTop);    var newSpot = new File(dskPth+"/myArray");    var selectedFolder = newSpot.saveDlg('Select Destination Folder');    var illFilePath = selectedFolder.path;    //alert(illFilePath);    //alert(selectedFolder.name);    var comboname=illFilePath.toString()+"/"+selectedFolder.name.toString()+".txt";    //alert(comboname);        saveTxt(et_array.text,comboname);    }catch(err){}                    }function saveTxt(txt,myPatho){    var saveFile = File(myPatho);    if(saveFile.exists)        saveFile.remove();    saveFile.encoding = "UTF8";    saveFile.open("e", "TEXT", "????");    saveFile.writeln(txt);    saveFile.close();    alert("Saved!")}bt_import.onClick = myImport;bt_save.onClick = mySave;bt_getArray.onClick = getArrayHere;bt_makerMarkers.onClick = nowMakerMarkers;bt_changeArray.onClick = changeMyarray;et_array.onChange = recalculate;//~ et_assetFolderName.onChange = updateFolderName;//~ et_directions.onChange = updateDirections;bt_makePully.onClick = makePully;bt_arrangeContent.onClick = arrangeContent;                     // DropDownList default selection                    //myPanel.grp.myDropDownList.selection = 2;//Item index starts at 0                      //Setup panel sizing and make panel resizable                    myPanel.layout.layout(true);                    //myPanel.pan1.minimumSize = myPanel.pan1.size;                    myPanel.layout.resize();                    myPanel.onResizing = myPanel.onResize = function () {this.layout.resize();}                     return myPanel;          }            var myScriptPal = myScript_buildUI(thisObj);            if ((myScriptPal != null) && (myScriptPal instanceof Window)) {                    myScriptPal.center();                    myScriptPal.show();                    }          }          myScript(this);} 